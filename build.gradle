plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT" apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    configurations {
        embed
        implementation.extendsFrom embed
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()

        embed("li.cil.ceres:ceres:${ceres_version}") { transitive = false }
        embed("li.cil.sedna:sedna:${sedna_version}") { transitive = false }
        embed("li.cil.sedna:sedna-buildroot:${sedna_buildroot_version}") { transitive = false }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.semver}+${getGitRef()}"
    group = rootProject.maven_group

    repositories {
        repositories {
            mavenCentral()
            ["fnuecke/ceres", "fnuecke/sedna", "fnuecke/buildroot"].forEach(repo -> {
                maven {
                    url = uri("https://maven.pkg.github.com/${repo}")
                    credentials {
                        username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                        password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
                    }
                }
            })
        }
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = System.getenv("GITHUB_MAVEN_URL") ?: ""
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: ""
    project {
        id = curse_project_id
        releaseType = System.getenv('CURSEFORGE_RELEASE_TYPE') ?: "alpha"
        changelogType = 'markdown'
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion 'Forge'
        addGameVersion minecraft_version
        addGameVersion 'Java 17'
    }
}

idea {
    module {
        for (final String exclude in ['out', 'logs', 'run', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}
